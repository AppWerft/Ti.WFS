package ti.wfs;

/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */

import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.HashMap;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiC;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.jsonjava.XML;

import android.content.Context;

import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.AsyncHttpResponseHandler;

import cz.msebera.android.httpclient.Header;

// https://github.com/luis1987/PayPalAppcelerator/blob/master/android/src/com/bea/paypal/ModulopaypalModule.java
// example :https://github.com/paypal/PayPal-Android-SDK/blob/master/SampleApp/src/main/java/com/paypal/example/paypalandroidsdkexample/SampleActivity.java

@Kroll.proxy(creatableInModule = WfsModule.class)
public class WFSProxy extends KrollProxy {
	final String LCAT = "remXML ⚫️";
	private String wfs;
	private String version;

	private String xml;
	private HashMap<String, Object> jsonResult;

	private boolean post = false;
	public KrollFunction onLoadCallback;
	public KrollFunction onErrorCallback;
	Context ctx = TiApplication.getInstance().getApplicationContext();
	private long startTime = 0;
	private long transferTime = 0;
	private long parseTime = 0;
	private long xmllength = 0;
	private long jsonlength = 0;

	// http://stackoverflow.com/questions/1823264/quickest-way-to-convert-xml-to-json-in-java
	public WFSProxy() {
		super();
		Log.d(LCAT, "ClientProxy created");
	}

	public KrollDict getJSON() {
		return new KrollDict(jsonResult);
	}

	@Override
	public void handleCreationArgs(KrollModule module, Object[] props) {
		if (props.length > 1) {
			final URI uri;
			try {
				uri = new URI((String) props[0]);
				this.wfs = uri.toString();
				this.version = (String) props[1];
			} catch (URISyntaxException e) {
				e.printStackTrace();
			}
		}

	}

	@Kroll.method
	public void getFeature(KrollDict props, KrollFunction callback) {
		onLoadCallback = callback;
		String typeNames = props.getString("typeNames");
		KrollDict region = new KrollDict(props.getKrollDict("region"));
		double latitude = region.getDouble(TiC.PROPERTY_LATITUDE);
		double longitude = region.getDouble(TiC.PROPERTY_LONGITUDE);
		double latitudeDelta = region.getDouble(TiC.PROPERTY_LATITUDE_DELTA);
		double longitudeDelta = region.getDouble(TiC.PROPERTY_LONGITUDE_DELTA);
		String BBOX = String.valueOf(latitude - latitudeDelta / 2) + ","
				+ String.valueOf(longitude - longitudeDelta / 2) + ","
				+ String.valueOf(latitude + latitudeDelta / 2) + ","
				+ String.valueOf(longitude + longitudeDelta / 2) + ","+"urn:x-ogc:def:crs:EPSG:4326";
		String url = this.wfs + "?SRSName=urn:x-ogc:def:crs:EPSG%3A4326&REQUEST=GetFeature&SERVICE=wfs&CRS=EPSG%3A4326&BBOX="+ 
				BBOX + "&VERSION="+this.version + "&TYPENAMES="+ typeNames.replace(":","%3A");
		if (this.wfs != null) {
			AsyncHttpClient client = new AsyncHttpClient();
			client.get(ctx, url, new XMLResponseHandler());
		}
	}
	
	@Kroll.method
	public void getCapabilities(KrollFunction callback) {
		onLoadCallback = callback;
		String url = this.wfs + "?REQUEST=GetCapabilities&SERVICE=wfs&VERSION="+this.version;
		if (this.wfs != null) {
			AsyncHttpClient client = new AsyncHttpClient();
			client.get(ctx, url, new XMLResponseHandler());
		}
	}
	@Kroll.method
	public void describeFeatureType(KrollFunction callback) {
		onLoadCallback = callback;
		String url = this.wfs + "?REQUEST=DescribeFeatureType&SERVICE=wfs&VERSION="+this.version;
		if (this.wfs != null) {
			AsyncHttpClient client = new AsyncHttpClient();
			client.get(ctx, url, new XMLResponseHandler());
		}
	}
	private final class XMLResponseHandler extends AsyncHttpResponseHandler {
		@Override
		public void onFailure(int status, Header[] header, byte[] response,
				Throwable arg3) {
			if (onErrorCallback != null)
				onErrorCallback.call(getKrollObject(), new KrollDict());
		}

		@Override
		public void onSuccess(int status, Header[] header, byte[] response) {
			String charset = "UTF-8";
			for (int i = 0; i < header.length; i++) {
				if (header[i].getName() == "Content-Type") {
					String[] parts = header[i].getValue().split("; ");
					if (parts != null) {
						charset = parts[1].replace("charset=", "")
								.toUpperCase();
					}
				}
			}
			String xml = "";
			try {
				xml = new String(response, charset);
			} catch (UnsupportedEncodingException e1) {
				e1.printStackTrace();
			}
			xmllength = response.length;
			transferTime = System.currentTimeMillis() - startTime;
			startTime = System.currentTimeMillis();
			JSONObject json = ti.wfs.JSON
					.toJSON(org.json.jsonjava.XML.toJSONObject(xml));
			try {
				buildPayload(json);
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}
	}

	private void buildPayload(JSONObject json) throws JSONException {
		jsonResult = new HashMap<String, Object>();
		jsonResult.put("data", new KrollDict((org.json.JSONObject) json));
		parseTime = System.currentTimeMillis() - startTime;
		KrollDict stats = new KrollDict();

		stats.put("transfertime", transferTime);
		stats.put("parsetime", parseTime);
		stats.put("xmllength", xmllength);
		stats.put("jsonlength", json.toString().length());
		jsonResult.put("statistics", stats);
		if (onLoadCallback != null) {
			onLoadCallback.call(getKrollObject(), jsonResult);
		}
	}
}